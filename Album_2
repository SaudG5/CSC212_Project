package theProject_2;


public class Album {
    private final String name;
    private final String condition;
    private final InvIndexPhotoManager manager;
    private int nbComp;

    public Album(String name, String condition, InvIndexPhotoManager manager) {
        this.name = name;
        this.condition = condition;
        this.manager = manager;
        this.nbComp = 0;
    }

    public String getName() {
        return name;
    }

    public String getCondition() {
        return condition;
    }

    public InvIndexPhotoManager getManager() {
        return manager;
    }

    
    public LinkedList<Photo> getPhotos() {
        nbComp = 0;
        LinkedList<Photo> result = new LinkedList<>();

        // No condition: return all photos
        if (condition == null || condition.trim().isEmpty()) {
            LinkedList<Photo> temp = new LinkedList<>();
            collectAllPhotos(manager.getPhotos().getRoot(), temp);
            LinkedList<Photo> unique = new LinkedList<>();
            temp.findfirst();
            while (temp.isThereNext()) {
                Photo p = temp.retrieve();
                if (!unique.find(p)) {
                    unique.insert(p);
                }
                temp.findnext();
            }
            return unique;
        }

        // Split keywords
        String[] keywords = condition.trim().split("\\s+AND\\s+");
        BST<LinkedList<Photo>> bst = manager.getPhotos();

        // First keyword lookup
        if (!bst.findKey(keywords[0])) {
            nbComp += bst.getNbComp(keywords[0]);
            return result;
        }
        nbComp += bst.getNbComp(keywords[0]);
        LinkedList<Photo> currentList = bst.retrieve();
        // initialize result from first list
        currentList.findfirst();
        while (currentList.isThereNext()) {
            result.insert(currentList.retrieve());
            currentList.findnext();
        }

        // Intersect with subsequent keyword lists
        for (int i = 1; i < keywords.length; i++) {
            String key = keywords[i];
            if (!bst.findKey(key)) {
                nbComp += bst.getNbComp(key);
                return new LinkedList<>();
            }
            nbComp += bst.getNbComp(key);
            LinkedList<Photo> nextList = bst.retrieve();
            LinkedList<Photo> intersection = new LinkedList<>();

            // filter result by membership in nextList (no bst count)
            result.findfirst();
            while (result.isThereNext()) {
                Photo p = result.retrieve();
                if (nextList.find(p)) {
                    intersection.insert(p);
                }
                result.findnext();
            }
            result = intersection;
        }
        return result;
    }

     //Recursively collects all photos from the BST under each tag bucket.
    
    private void collectAllPhotos(BSTNode<LinkedList<Photo>> node, LinkedList<Photo> list) {
        if (node == null) return;
        LinkedList<Photo> bucket = node.data;
        bucket.findfirst();
        while (bucket.isThereNext()) {
            list.insert(bucket.retrieve());
            bucket.findnext();
        }
        collectAllPhotos(node.left, list);
        collectAllPhotos(node.right, list);
    }

    
     // Returns the number of BST comparisons
    
    public int getNbComps() {
    	getPhotos();
        return nbComp;
    }
}

package TheProject;

public class Album {
    private String name;
    private String condition;
    private PhotoManager manager;
    private int nbComps;

    public Album(String name, String condition, PhotoManager manager) {
        this.name = name;
        this.condition = condition;
        this.manager = manager;
        this.nbComps = 0;
    }
    
    public String getName() {
        return name;
    }

    public String getCondition() {
        return condition;
    }

    public PhotoManager manager() {
        return manager;
    }

    public LinkedList<Photo> getPhotos() {
        // reset comparison count at start
        nbComps = 0;

        LinkedList<Photo> allPhotos = manager.getPhotos();

        // if no condition provided, return all photos
        if (condition == null || condition.trim().isEmpty()) {
            return allPhotos;
        }

        // build list of terms to AND-match
        LinkedList<String> con = new LinkedList<>();
        String[] terms = condition.split("\\s*AND\\s*");
        for (String term : terms) {
            con.insert(term);
        }

        LinkedList<Photo> result = new LinkedList<>();
        allPhotos.findfirst();
        while (true) {
            Photo photo = allPhotos.retrieve();
            boolean allMatch = true;

            con.findfirst();
            while (true) {
                String key = con.retrieve();
                LinkedList<String> tags = photo.getTags();
                boolean found = false;

                tags.findfirst();
                while (true) {
                    nbComps++;
                    if (tags.retrieve().equals(key)) {
                        found = true;
                        break;
                    }
                    if (tags.last()) {
                        break;
                    }
                    tags.findnext();
                }

                if (!found) {
                    allMatch = false;
                    break;
                }
                if (con.last()) {
                    break;
                }
                con.findnext();
            }

            if (allMatch) {
                result.insert(photo);
            }
            if (allPhotos.last()) {
                break;
            }
            allPhotos.findnext();
        }

        return result;
    }

    
    public int getNbComps() {
    	getPhotos();
        return nbComps;
    }
}

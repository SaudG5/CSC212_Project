package theProject_2;

public class BST<T> {

    private BSTNode<T> root, current;
    private int nbComp;

    public BST() {
        current = root = null;
    }

    public void clear() {
        current = root = null;
    }

    public boolean empty() {
        return root == null;
    }

    public boolean full() {
        return false;
    }

    public T retrieve() {
        return current.data;
    }

    public boolean findKey(String k) {
        nbComp = 1;
        BSTNode<T> p = root;
        while (p != null) {
            current = p;
            if (k.compareTo(p.key) == 0) {
                return true;
            } else if (k.compareTo(p.key) < 0) {
                p = p.left;
            } else {
                p = p.right;
            }
            nbComp++;
        }
        return false;
    }

    public boolean insert(String k, T val) {
        if (root == null) {
            current = root = new BSTNode<T>(k, val);
            return true;
        }

        BSTNode<T> p = current;
        if (findKey(k)) {
            current = p;
            return false;
        }

        BSTNode<T> tmp = new BSTNode<T>(k, val);
        if (k.compareTo(current.key) < 0) {
            current.left = tmp;
        } else {
            current.right = tmp;
        }
        current = tmp;
        return true;
    }

    public boolean removeKey(String k) {
        BooleanWrapper removed = new BooleanWrapper(false);
        root = removeKeyAux(k, root, removed);
        current = root;
        return removed.get();
    }

    
     // Recursive helper for removeKey.
     
    private BSTNode<T> removeKeyAux(String key, BSTNode<T> node, BooleanWrapper removed) {
        if (node == null) {
            return null;
        }
        int cmp = key.compareTo(node.key);
        if (cmp < 0) {
            node.left = removeKeyAux(key, node.left, removed);
        } else if (cmp > 0) {
            node.right = removeKeyAux(key, node.right, removed);
        } else {
            // Key found
            removed.set(true);
            if (node.left != null && node.right != null) {
                // Two children: replace with inorder successor
                BSTNode<T> successor = findMin(node.right);
                node.key = successor.key;
                node.data = successor.data;
                node.right = removeKeyAux(successor.key, node.right, removed);
            } else {
                // One or zero children
                node = (node.left != null) ? node.left : node.right;
            }
        }
        return node;
    }

    /**
     * Finds the minimum node in the subtree rooted at node.
     */
    private BSTNode<T> findMin(BSTNode<T> node) {
        while (node.left != null) {
            node = node.left;
        }
        return node;
    }


    public boolean update(String k, T val) {
        if (findKey(k)) {
            current.data = val;
            return true;
        } else {
            return false;
        }
    }

    public BSTNode<T> getRoot() {
        return root;
    }


    @Override
    public String toString() {
        if (root == null)
            return "Null";
        return root.toString();
    }

    public int getNbComp(String k) {
        findKey(k);
        return nbComp;
    }

}

